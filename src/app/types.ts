import { FunctionDeclarationSchema } from '@google/generative-ai'
import { MatchedItems } from './items/types'

/**
 * The assistant types that can fulfill the chat request
 */
export type AssistantType = 'openai' | 'gemini'

export interface FunctionDeclaration {
  /**
   * The description and purpose of the function. Model uses it to decide how and whether to call the function.
   */
  description: string

  /**
   * The name of the function to call
   */
  name: string

  /**
   * Describes the parameters to this function
   */
  parameters: FunctionDeclarationSchema

  /**
   * The API function to call at Gemini's choice
   */
  function: (parameters: any) => Promise<any>
}

/**
 * The user message prompt.
 */
export interface UserMessage {
  /**
   * The contents of the user message.
   */
  content: string

  /**
   * The type of the message, in this case is 'user'.
   */
  type: 'user'
}

/**
 * The assistant message response.
 */
export interface AssistantMessage {
  /**
   * The contents of the assistant message.
   */
  content: string

  /**
   * The type of the message, in this case is 'assistant'.
   */
  type: 'assistant'
}

export interface FunctionCall {
  /**
   * The arguments to call the function with, as generated by the model.
   */
  arguments: {}

  /**
   * A unique ID for the function to call in order to associate it with the function call response
   */
  id?: string

  /**
   * The name of the function to call.
   */
  name: string
}

/**
 * The assistant message that describes the function to call
 */
export interface FunctionCallMessage {
  calls: FunctionCall[]

  /**
   * The contents of the assistant message.
   */
  content: string | null

  /**
   * The type of the message, in this case is 'functionCall'.
   */
  type: 'functionCall'
}

/**
 * The user message that describes the function call response
 */
export interface FunctionResponseMessage {
  /**
   * The response from the function call.
   */
  content: MatchedItems

  /**
   * The unique ID of the function call that this message is a response to.
   */
  id?: string

  /**
   * The n ame of the function that this message is a response to.
   */
  name: string

  /**
   * The type of the message, in this case is 'functionResponse'.
   */
  type: 'functionResponse'
}

/**
 * The message types that can be sent between the user and the assistant.
 */
export type Message =
  | UserMessage
  | AssistantMessage
  | FunctionCallMessage
  | FunctionResponseMessage
